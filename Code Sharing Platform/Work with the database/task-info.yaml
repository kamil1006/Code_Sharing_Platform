type: edu
files:
- name: src/platform/CodeSharingPlatform.java
  visible: true
  text: |
    package platform;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.web.bind.annotation.RestController;
    import platform.entity.Informacja;
    import platform.service.Informacje;

    @SpringBootApplication
    //@RestController
    public class CodeSharingPlatform {

        public static Informacja kot=new Informacja("public static void main(String[] args) {\n" +
                                                      "    SpringApplication.run(CodeSharingPlatform.class, args);\n" +
                                                      "}");
        public  static Informacje zbiorKotow = new Informacje() ;

        public static void main(String[] args) {


            SpringApplication.run(CodeSharingPlatform.class, args);
        }

    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |
    plugins {
        id 'org.springframework.boot' version '2.3.3.RELEASE'
        id 'java'
    }

    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'com.google.code.gson:gson:2.8.6'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        implementation 'org.springframework.boot:spring-boot-starter-freemarker'

        compile("org.springframework.boot:spring-boot-starter-web")
        compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |+
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true


  learner_created: false
- name: src/resources/templates/pokaz.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en" xmlns:th="http://www.thymeleaf.org">
    <head>
        <meta charset="UTF-8">
        <title>Code</title>

        <style>
            pre {
                width:600px;
                height:200px;
                font-size:10pt;
                border-style: double;
                }


        </style>



    </head>
    <body>
    <span id="load_date" th:text="${czasWyswietlania}"> ... </span>
    <pre id="code_snippet" th:text="${informacyjka1}"> ... </pre>
    </body>
    </html>
  learner_created: false
- name: src/platform/controller/GlownyKontroler.java
  visible: true
  text: |
    package platform.controller;


    import com.google.gson.Gson;
    import org.springframework.http.HttpHeaders;
    import org.springframework.http.ResponseEntity;

    import org.springframework.ui.Model;
    import org.springframework.web.bind.annotation.*;
    import platform.CodeSharingPlatform;
    import platform.entity.Informacja;
    import platform.entity.Wpis;
    import platform.pakowanie.Pakowarka;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Map;

    @RestController
    public class GlownyKontroler {

      //Informacja kot;
    /*
        public GlownyKontroler() {
            kot=new Informacja("public static void main(String[] args) {\n" +
                    "    SpringApplication.run(CodeSharingPlatform.class, args);\n" +
                    "}");
        }

     */
        //-----------------------------------------
        @GetMapping("/code1")
        @ResponseBody
        public String kode() {




            return CodeSharingPlatform.kot.getKod();
        }
        //-----------------------------------------
        @GetMapping("/api/code1")
        @ResponseBody
        public String apiKode() {
          return CodeSharingPlatform.kot.getKodJson();

        }
        //-----------------------------------------
        @GetMapping("/api/code")
        @ResponseBody
        public ResponseEntity<String> apiKode1() {
            HttpHeaders responseHeaders = new HttpHeaders();
            responseHeaders.set("Content-Type","application/json");

            CodeSharingPlatform.kot.ustawCzas();
            String kodJson = CodeSharingPlatform.kot.getKodJson();
            return ResponseEntity.ok()
                    .headers(responseHeaders)
                    .body(kodJson);



        }

        //-----------------------------------------
        @GetMapping("/code2")
        @ResponseBody
        public ResponseEntity<String> kode1() {
            HttpHeaders responseHeaders = new HttpHeaders();
            responseHeaders.set("Content-Type","text/html");

            Pakowarka pakowarka= new Pakowarka(CodeSharingPlatform.kot);

            return ResponseEntity.ok()
                    .headers(responseHeaders)
                    .body(pakowarka.getStrona());



        }


        //-----------------------------------------
        //@PostMapping(path="/code/new")
        public ResponseEntity<String> kodeNewSubmit(@ModelAttribute  Informacja inf, Model model){


            System.out.print("z informacji ---");
            System.out.println( inf.getKodJson());
            System.out.print("z modelu ---");
            System.out.println( model.getAttribute("informacja"));

            HttpHeaders responseHeaders = new HttpHeaders();
            responseHeaders.set("Content-Type","application/json");
          return ResponseEntity.ok()
                    .headers(responseHeaders)
                    .body("{}");

        }
        //-----------------------------------------
        //z jsona postman
        @PostMapping(path="api/code/new", consumes = "application/json")
        public  ResponseEntity<String> kodeNewSubmit1(@RequestBody com.fasterxml.jackson.databind.JsonNode inf,Model model){

            System.out.println("++++");
            //System.out.println(inf);
            //System.out.println("++++");
            String s = inf.toString();

            String code = inf.get("code").asText();

            CodeSharingPlatform.kot.setKod(code);

            Informacja iii= new Informacja(code);
           // CodeSharingPlatform.kot.setKodJson(s);
            int i = CodeSharingPlatform.zbiorKotow.putInformacja(iii);

            HttpHeaders responseHeaders = new HttpHeaders();
            responseHeaders.set("Content-Type","application/json");

         return ResponseEntity.ok()
                    .headers(responseHeaders)
                    .body("{\"id\" : \""+i+"\"}");
        }
        //-----------------------------------------

        /**
         *
         * https://stackoverflow.com/questions/34782025/http-post-request-with-content-type-application-x-www-form-urlencoded-not-workin
         */
        // z formularza
        @PostMapping(path="/code/new",  consumes = "application/x-www-form-urlencoded")
        public   ResponseEntity<String> kodeNewSubmit1(@ModelAttribute Informacja inf) {

            String code = inf.getKod();


            //CodeSharingPlatform.kot.setKod(code);
            //CodeSharingPlatform.kot.setKodJson(inf.getKodJson());
           // CodeSharingPlatform.zbiorKotow.putInformacja(inf);

            HttpHeaders responseHeaders = new HttpHeaders();
            responseHeaders.set("Content-Type","application/json");

            return ResponseEntity.ok()
                    .headers(responseHeaders)
                    .body("{}");

        }
        //-----------------------------------------
        @GetMapping("/api/code/latest")
        @ResponseBody
        public ResponseEntity<String> apiKodeLatest() {
            HttpHeaders responseHeaders = new HttpHeaders();
            responseHeaders.set("Content-Type","application/json");

            Map<Integer,Informacja> zbior = CodeSharingPlatform.zbiorKotow.getZbior();

            List<Wpis>
            odpowiedz= CodeSharingPlatform.zbiorKotow.podajListeWpisow();
            /*
            for(Map.Entry<Integer, Informacja> i:zbior.entrySet()){
                String kod = i.getValue().getKod();
                String dataCzas = i.getValue().getTimeFormatted();
                odpowiedz.add(new Wpis(kod,dataCzas));
            }
            */


            Gson gson = new Gson();
            String s = gson.toJson(odpowiedz);


           // CodeSharingPlatform.kot.ustawCzas();
           // String kodJson = CodeSharingPlatform.kot.getKodJson();
            return ResponseEntity.ok()
                    .headers(responseHeaders)
                    .body(s);
                    // .body(kodJson);



        }
    //-----------------------------------------
    @GetMapping("/api/code/{id}")
    @ResponseBody
    public ResponseEntity<String> apiKode2( @PathVariable("id") int id) {
        HttpHeaders responseHeaders = new HttpHeaders();
        responseHeaders.set("Content-Type","application/json");

        Informacja informacja = CodeSharingPlatform.zbiorKotow.getInformacja(id);
        Wpis w= new Wpis(informacja.getKod(),informacja.getTimeFormatted());
        Gson gson= new Gson();



        return ResponseEntity.ok()
                .headers(responseHeaders)
                .body(gson.toJson(w));



    }
    //-----------------------------------------


    //-----------------------------------------

    }
  learner_created: false
- name: src/platform/controller/CodeWebController.java
  visible: true
  text: |
    package platform.controller;

    import com.google.gson.Gson;
    import org.springframework.http.HttpHeaders;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Controller;
    import org.springframework.ui.Model;
    import org.springframework.web.bind.annotation.*;
    import platform.CodeSharingPlatform;
    import platform.entity.Informacja;
    import platform.entity.Wpis;


    import javax.servlet.http.HttpServletResponse;
    import java.time.LocalDateTime;
    import java.util.List;
    import java.util.Map;

    @Controller
    public class CodeWebController {

        @GetMapping(path="/code/new")
        public String kodeNew(HttpServletResponse response, Model model) {
            response.addHeader("Content-Type", "text/html");
            model.addAttribute("powitanie", "Podaj tekst do zapisania:");
            model.addAttribute("informacyjka",new Informacja(""));
           // System.out.println("dede");
           return "kodeNew";
        }
        //-----------------------------------------


        //-----------------------------------------
        @GetMapping(path="/code/new1")
        public String dodawanie() {
            //System.out.println("dodawanie");
            return "dodaj";
        }
        //-----------------------------------------
        @GetMapping("/code")
        public String pakzuje(Model model) {
            LocalDateTime localDateTime = LocalDateTime.now(); //get current date time
            CodeSharingPlatform.kot.setLocalDateTime(localDateTime);
            model.addAttribute("informacyjka1", CodeSharingPlatform.kot.getKod());

            model.addAttribute("czasWyswietlania", CodeSharingPlatform.kot.pokazCzas());
            return "pokaz";
        }
        //-----------------------------------------
        @GetMapping("/code/latest")
        public String pakzujeLatesty(Model model) {
            LocalDateTime localDateTime = LocalDateTime.now(); //get current date time
            CodeSharingPlatform.kot.setLocalDateTime(localDateTime);

            List<Wpis> zbior = CodeSharingPlatform.zbiorKotow.podajListeWpisow();
            model.addAttribute("informacyjki", zbior);

            model.addAttribute("czasWyswietlania", CodeSharingPlatform.kot.pokazCzas());
            return "pokazLatest";
        }

        //-----------------------------------------
        @GetMapping("/code/{id}")

        public String apiKode2(@PathVariable("id") int id, Model model) {
            HttpHeaders responseHeaders = new HttpHeaders();
            responseHeaders.set("Content-Type","application/json");

            Informacja informacja = CodeSharingPlatform.zbiorKotow.getInformacja(id);
            Wpis w= new Wpis(informacja.getKod(),informacja.getTimeFormatted());
            Gson gson= new Gson();
            model.addAttribute("informacyjka1", w.getCode());

            model.addAttribute("czasWyswietlania", w.getDate());


            return "pokaz";


        }
        //-----------------------------------------


    }
  learner_created: false
- name: src/resources/templates/kodeNew.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en" xmlns:th="http://www.thymeleaf.org">
    <head>
        <meta charset="UTF-8">
        <title>Create</title>

        <style>
            textarea {
                width:600px;
                height:200px;
                font-size:10pt;
                }


        </style>

    </head>
    <body>
    <pre th:text="${powitanie}"></pre>
    <!--
    <form action="#" th:action="@{/code/new}" th:object="${informacyjka}" method="post">
        <textarea name="textarea" th:field="*{kod}">// write your code here</textarea>
       <br><br>
       <button type="submit">Submit</button>
    </form>
    -->

    <form action="" method="post" th:object="${informacyjka}">
        <textarea id="code_snippet" th:field="*{kod}"> //write your code here </textarea>
        <br><br>
        <button id="send_snippet" type="submit" onclick="send()">Submit</button>
    </form>

    <!--
    <form action="" method="post" >
        <textarea id="code_snippet" > //write your code here </textarea>
        <br><br>
        <button id="send_snippet" type="submit" onclick="send()">Submit</button>
    </form>
    -->


    </body>
    <script>
    function send() {
        let object = {
            "code": document.getElementById("code_snippet").value
        };

        let json = JSON.stringify(object);

        let xhr = new XMLHttpRequest();
        xhr.open("POST", '/api/code/new', false)
        xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');
        xhr.send(json);

        if (xhr.status == 200) {
          alert("Success!");
        }
    }


    </script>


    </html>
  learner_created: false
- name: src/platform/entity/Informacja.java
  visible: true
  text: |
    package platform.entity;



    import com.google.gson.Gson;

    import java.time.LocalDateTime;
    import java.time.format.DateTimeFormatter;
    import java.util.HashMap;
    import java.util.LinkedHashMap;
    import java.util.Map;

    public class Informacja {

        String kod;
        String kodJson;

        LocalDateTime localDateTime;
        private static final String DATE_FORMATTER= "yyyy/MM/dd HH:mm:ss";
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(DATE_FORMATTER);
        // JsonObject jo;


        public Informacja(String kod) {
            this.kod = kod;
            this.localDateTime=LocalDateTime.now();

            Gson gson = new Gson();
            Map<String,String> mapka= new LinkedHashMap<>();//new HashMap<>();
            mapka.put("code",kod);
            mapka.put("date",localDateTime.format(formatter));

            kodJson=gson.toJson(mapka);
          // jo = new JsonParser().parse(kod).getAsJsonObject();


        }

        public String getKod() {
            return kod;
        }

        public void setKod(String kod) {
            this.kod = kod;
            this.localDateTime=LocalDateTime.now();

            Gson gson = new Gson();
            Map<String,String> mapka= new LinkedHashMap<>();
            mapka.put("code",kod);
            mapka.put("date",localDateTime.format(formatter));

            kodJson=gson.toJson(mapka);

        }

        public String getKodJson() {
            return kodJson;
        }

        public void setKodJson(String kodJson) {
            this.kodJson = kodJson;
        }


        public LocalDateTime getLocalDateTime() {
            return localDateTime;
        }
        public String getTimeFormatted(){return localDateTime.format(formatter); }

        public void setLocalDateTime(LocalDateTime localDateTime) {
            this.localDateTime = localDateTime;
            Gson gson = new Gson();
            Map<String,String> mapka= new LinkedHashMap<>();
            mapka.put("code",kod);
            mapka.put("date",localDateTime.format(formatter));

            kodJson=gson.toJson(mapka);



        }
        public String pokazCzas(){
            return localDateTime.format(formatter);
        }
        public void ustawCzas(){
            this.localDateTime=LocalDateTime.now();
            Gson gson = new Gson();
            Map<String,String> mapka= new LinkedHashMap<>();
            mapka.put("code",kod);
            mapka.put("date",localDateTime.format(formatter));

            kodJson=gson.toJson(mapka);
        }
    }
  learner_created: false
- name: src/resources/templates/dodaj.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>tytul strony</title>
    </head>
    <body>
    <h1> witaj w get kode</h1>
    </body>
    </html>
  learner_created: false
- name: src/platform/pakowanie/Pakowarka.java
  visible: true
  text: |
    package platform.pakowanie;

    import platform.entity.Informacja;

    public class Pakowarka {

        Informacja  inf;
        String strona;
        //--------------------------------------
        public Pakowarka(Informacja inf) {
            this.inf = inf;
            pakuj();
        }
        //--------------------------------------
        public void pakuj() {
            String przed;
            String po;
            przed="<html>\n" +
                    "<head>\n" +
                    "    <title>Code</title>\n" +
                    "</head>\n" +
                    "<body>\n" +
                    "    <pre>";


            po="</pre>\n" +
                    "</body>\n" +
                    "</html>";
            strona=przed+inf.getKod()+po;

        }
        //--------------------------------------

        public Informacja getInf() {
            return inf;
        }

        public String getStrona() {
            return strona;
        }


        //--------------------------------------

    }
  learner_created: false
- name: src/platform/service/Informacje.java
  visible: true
  text: "package platform.service;\n\nimport org.springframework.stereotype.Component;\n\
    import platform.entity.Informacja;\nimport platform.entity.Wpis;\n\nimport java.util.*;\n\
    \n@Component\npublic class Informacje {\n\n   int licznik;\n   Map<Integer,Informacja>\
    \ zbior;\n\n\n    public  Informacje(){\n        this.zbior = new LinkedHashMap<>();\n\
    \n        licznik=0;\n\n\n    }\n\n\n\n    public Map<Integer, Informacja> getZbior()\
    \ {\n        return zbior;\n    }\n\n\n\n    public int getLicznik() {\n     \
    \   return licznik;\n    }\n\n    public int putInformacja(Informacja inf){\n\
    \        licznik++;\n        this.zbior.put(licznik,inf);\n\n\n        return\
    \ licznik;\n\n    }\n    public Informacja getInformacja(int t){\n      Informacja\
    \ a = null;\n       for(Map.Entry<Integer, Informacja> i:zbior.entrySet()){\n\
    \           if(i.getKey()==t) {\n              a = i.getValue();\n           }\n\
    \        }\n       if(a.equals(null)) return null;\n       else \n        return\
    \ a;\n    }\n    //-------------------------------------\n    public List<Wpis>\
    \ podajListeWpisow(){\n        LinkedList<Wpis> lista= new LinkedList<>();\n \
    \       int x=0;\n\n\n\n        for(Map.Entry<Integer, Informacja> i:zbior.entrySet()){\n\
    \            lista.add(new Wpis(i.getValue().getKod(),i.getValue().getTimeFormatted()));\n\
    \n\n        }\n\n        List<Wpis> listaBack= new ArrayList<>();\n        for(int\
    \ i=lista.size()-1;i>=0;i--){\n            listaBack.add(lista.get(i));\n    \
    \        x++;\n            if(x>=10) break;\n        }\n\n\n        return listaBack;\n\
    \    }\n    //-------------------------------------\n\n}\n"
  learner_created: false
- name: src/platform/entity/Wpis.java
  visible: true
  text: |
    package platform.entity;

    public class Wpis {
        String code;
        String date;

        public Wpis(String code, String date) {
            this.code = code;
            this.date = date;
        }

        public String getCode() {
            return code;
        }

        public void setCode(String code) {
            this.code = code;
        }

        public String getDate() {
            return date;
        }

        public void setDate(String date) {
            this.date = date;
        }
    }
  learner_created: false
- name: test/CodeSharingPlatformTest.java
  visible: false
  text: |
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.jsoup.Jsoup;
    import org.jsoup.nodes.Document;
    import org.jsoup.nodes.Element;
    import org.jsoup.select.Elements;
    import platform.CodeSharingPlatform;

    import java.util.HashMap;
    import java.util.Map;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;

    public class CodeSharingPlatformTest extends SpringTest {
        public CodeSharingPlatformTest() {
            super(CodeSharingPlatform.class, "../snippets.mv.db");
        }

        final String API_CODE = "/api/code/";
        final String WEB_CODE = "/code/";

        final String API_CODE_NEW = "/api/code/new";
        final String WEB_CODE_NEW = "/code/new";

        final String API_LATEST = "/api/code/latest";
        final String WEB_LATEST = "/code/latest";

        final String[] SNIPPETS = {
            "public static void ...",
            "class Code { ...",
            "Snippet #3",
            "Snippet #4",
            "Snippet #5",
            "Snippet #6",
            "Snippet #7",
            "Snippet #8",
            "Snippet #9",
            "Snippet #10",
            "Snippet #11",
            "Snippet #12",
            "Snippet #13",
            "Snippet #14",
        };

        final Map<Integer, String> ids = new HashMap<>();
        final Map<Integer, String> dates = new HashMap<>();

        static String th(int val) {
            if (val == 1) {
                return "" + val + "st";
            } else if (val == 2) {
                return "" + val + "nd";
            } else if (val == 3) {
                return "" + val + "rd";
            } else {
                return "" + val + "th";
            }
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        static void checkTitle(Document doc, String url, String title) {
            if (!doc.title().equals(title)) {
                throw new WrongAnswer("GET " + url +
                    " should contain title \"" + title + "\"");
            }
        }

        static Element getSingleTag(Element doc, String url, String tag) {
            Elements elems = getElemsByTag(doc, url, tag, 1);
            return elems.get(0);
        }

        static Elements getElemsByTag(Element doc, String url, String tag, int length) {
            Elements elems = doc.getElementsByTag(tag);
            if (elems.size() != length) {
                throw new WrongAnswer("GET " + url +
                    " should contain " + length + " <" + tag + "> " +
                    "element"+ (length == 1 ? "" : "s") +", found: " + elems.size());
            }
            return elems;
        }

        static Element getById(Element doc, String url, String id, String tag) {
            Element elem = doc.getElementById(id);

            if (elem == null) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id \"" + id + "\", no one found");
            }

            if (!elem.tagName().equals(tag)) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id  \"" + id + "\" and tag \"" + tag + "\", " +
                    "found another tag: \"" + elem.tagName() + "\"");
            }

            return elem;
        }

        @DynamicTestingMethod
        public DynamicTesting[] dt = new DynamicTesting[] {
            // test 1
            this::checkWebCodeNew,

            // test 2
            () -> postSnippet(0),
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiLatest(0),
            () -> checkWebLatest(0),

            // test 7
            () -> postSnippet(1),
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiLatest(1, 0),
            () -> checkWebLatest(1, 0),

            // test 14
            () -> postSnippet(2),
            () -> postSnippet(3),
            () -> postSnippet(4),
            () -> postSnippet(5),
            () -> postSnippet(6),
            () -> postSnippet(7),
            () -> postSnippet(8),
            () -> postSnippet(9),
            () -> postSnippet(10),
            () -> postSnippet(11),
            () -> postSnippet(12),
            () -> postSnippet(13),

            // test 26
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiCode(2),
            () -> checkWebCode(2),
            () -> checkApiCode(3),
            () -> checkWebCode(3),
            () -> checkApiCode(4),
            () -> checkWebCode(4),
            () -> checkApiCode(5),
            () -> checkWebCode(5),
            () -> checkApiCode(6),
            () -> checkWebCode(6),
            () -> checkApiCode(7),
            () -> checkWebCode(7),
            () -> checkApiCode(8),
            () -> checkWebCode(8),
            () -> checkApiCode(9),
            () -> checkWebCode(9),
            () -> checkApiCode(10),
            () -> checkWebCode(10),
            () -> checkApiCode(11),
            () -> checkWebCode(11),
            () -> checkApiCode(12),
            () -> checkWebCode(12),
            () -> checkApiCode(13),
            () -> checkWebCode(13),

            // test 54
            () -> checkApiLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
            () -> checkWebLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),

            // test 56
            this::reloadServer,

            // test 57
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiCode(2),
            () -> checkWebCode(2),
            () -> checkApiCode(3),
            () -> checkWebCode(3),
            () -> checkApiCode(4),
            () -> checkWebCode(4),
            () -> checkApiCode(5),
            () -> checkWebCode(5),
            () -> checkApiCode(6),
            () -> checkWebCode(6),
            () -> checkApiCode(7),
            () -> checkWebCode(7),
            () -> checkApiCode(8),
            () -> checkWebCode(8),
            () -> checkApiCode(9),
            () -> checkWebCode(9),
            () -> checkApiCode(10),
            () -> checkWebCode(10),
            () -> checkApiCode(11),
            () -> checkWebCode(11),
            () -> checkApiCode(12),
            () -> checkWebCode(12),
            () -> checkApiCode(13),
            () -> checkWebCode(13),

            // test 85
            () -> checkApiLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
            () -> checkWebLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
        };

        private CheckResult checkApiCode(int id) {
            String codeId = ids.get(id);
            String snippet = SNIPPETS[id];

            HttpResponse resp = get(API_CODE + codeId).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("code", snippet)
                    .value("date", isString(s -> {
                        if (dates.containsKey(id)) {
                            return s.equals(dates.get(id));
                        }
                        dates.put(id, s);
                        return true;
                    }))
            );

            return CheckResult.correct();
        }

        private CheckResult checkWebCode(int id) {
            String codeId = ids.get(id);
            String apiSnippet = SNIPPETS[id];
            String apiDate = dates.get(id);

            String req = WEB_CODE + codeId;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, req, "Code");

            Element pre = getById(doc, req, "code_snippet", "pre");
            Element code = getSingleTag(pre, req, "code");

            String webSnippetCode = code.text();
            if (!webSnippetCode.trim().equals(apiSnippet.trim())) {
                return CheckResult.wrong("Web code snippet " +
                    "and api code snippet are different");
            }

            Element date = getById(doc, req, "load_date", "span");
            String webSnippetDate = date.text();
            if (!webSnippetDate.trim().equals(apiDate.trim())) {
                return CheckResult.wrong("Web snippet date " +
                    "and api snippet date are different");
            }

            if (!html.contains("hljs.initHighlightingOnLoad()")) {
                return CheckResult.wrong(
                    "Can't determine if code highlighting works or not.\n" +
                    "Use \"hljs.initHighlightingOnLoad()\" inside the script tags in the HTML page.");
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebCodeNew() {
            HttpResponse resp = get(WEB_CODE_NEW).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, WEB_CODE_NEW, "Create");

            getById(doc, WEB_CODE_NEW, "code_snippet", "textarea");
            getById(doc, WEB_CODE_NEW, "send_snippet", "button");

            return CheckResult.correct();
        }

        private CheckResult postSnippet(int id) {
            String snippet = SNIPPETS[id];

            HttpResponse resp = post(API_CODE_NEW, "{\"code\":\"" + snippet + "\"}").send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isString(i -> {
                        try {
                            Integer.parseInt(i);
                        } catch (NumberFormatException ex) {
                            return false;
                        }
                        ids.put(id, "" + i);
                        return true;
                    }))
            );

            return CheckResult.correct();
        }

        private CheckResult checkApiLatest(int... ids) {
            String req = API_LATEST;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isArray(ids.length, isObject()
                    .value("code", isString())
                    .value("date", isString())
                )
            );

            JsonArray elem = resp.getJson().getAsJsonArray();
            for (int i = 0; i < ids.length; i++) {
                JsonObject item = elem.get(i).getAsJsonObject();

                String actualSnippet = SNIPPETS[ids[i]];
                String actualDate = dates.get(ids[i]);

                String givenSnippet = item.get("code").getAsString();
                String givenDate = item.get("date").getAsString();

                if (!actualSnippet.equals(givenSnippet)) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1) +
                        " snippet doesn't match actual snippet.\n" +
                        "Expected:\n" + actualSnippet + "\n" +
                        "Found:\n" + givenSnippet);
                }

                if (!actualDate.equals(givenDate)) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1) +
                        " snippet's date doesn't match actual snippet's date.\n" +
                        "Expected:\n" + actualDate + "\n" +
                        "Found:\n" + givenDate);
                }
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebLatest(int... ids) {
            String req = WEB_LATEST;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, req, "Latest");

            Elements preList = getElemsByTag(doc, req, "pre", ids.length);
            Elements spanList = getElemsByTag(doc, req, "span", ids.length);

            for (int i = 0; i < ids.length; i++) {
                String apiSnippet = SNIPPETS[ids[i]];
                String apiDate = dates.get(ids[i]);
                Element pre = preList.get(i);

                String webSnippetCode = pre.text();
                if (!webSnippetCode.trim().equals(apiSnippet.trim())) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1)
                        + " snippet doesn't match " + th(i + 1) + " snippet via api.\n" +
                        "Expected:\n" + apiSnippet + "\n" +
                        "Found:\n" + webSnippetCode);
                }

                Element date = spanList.get(i);
                String webSnippetDate = date.text();
                if (!webSnippetDate.trim().equals(apiDate.trim())) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1)
                        + " snippet's date doesn't match " + th(i + 1)
                        + " snippet's date via api.\n" +
                        "Expected:\n" + apiDate + "\n" +
                        "Found:\n" + webSnippetDate);
                }
            }

            return CheckResult.correct();
        }

        private CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new RuntimeException(ex.getMessage());
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/platform/repository/Wpis2Repository.java
  visible: true
  learner_created: true
- name: src/platform/entity/Wpis2.java
  visible: true
  learner_created: true
- name: src/resources/templates/pokazLatest.html
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/130/stages/695/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 17 Apr 2021 11:01:49 UTC
record: 4
